import 'package:cloud_firestore/cloud_firestore.dart';

class Device {
  String name;
  String room;
  bool status;
  String icon;
  String? id; // Add an optional ID field, generated by Firebase
  List<int>? openPorts; // Add a list to store open ports
  String? ip; // Add an IP address field

  Device({
    required this.name,
    required this.room,
    required this.status,
    required this.icon,
    this.id, // Make the ID optional and add to constructor
    this.openPorts, // Add openPorts to constructor
    this.ip, // Add ip to constructor
  });

  // toJson method for conversion to Firestore data.
  // This is used when saving the device to Firestore.
  Map<String, dynamic> toJson() {
    return {
      'name': name,
      'room': room,
      'status': status,
      'icon': icon,
      'openPorts': openPorts,
      'ip': ip, // Include IP in Firestore data
      // The 'id' field is typically NOT included here when creating a new document,
      // as Firestore generates the ID. Our saving logic handles associating the Firestore
      // doc ID with the local Device object's 'id' field.
    };
  }

  // fromJson for converting from Firestore document data to a Device object
  // This is used when loading devices from Firestore.
  factory Device.fromJson(Map<String, dynamic> json, String documentId) {
    final List<dynamic>? portsDynamic = json['openPorts'] as List<dynamic>?;
    final List<int>? ports = portsDynamic?.cast<int>().toList();

    return Device(
      id: documentId, // Get the ID from the document ID passed in by Firestore
      name: json['name'] as String? ?? '',
      room: json['room'] as String? ?? '',
      status: json['status'] as bool? ?? false,
      icon: json['icon'] as String? ?? '',
      openPorts: ports,
      ip: json['ip'] as String?, // Get IP from Firestore data
    );
  }

  // fromJson for converting from the Python script's JSON output
  // This factory method is specifically for parsing the JSON received from the Python script.
  factory Device.fromPythonJson(Map<String, dynamic> json) {
    final List<dynamic>? portsDynamic = json['open_ports'] as List<dynamic>?;
    final List<int>? ports = portsDynamic?.cast<int>().toList();

    return Device(
      // Use the name from nmap if available, fallback to IP
      name: json['name'] as String? ?? json['ip'] as String? ?? 'Unknown Device',
      room: 'Discovered', // Default room for newly discovered devices
      status: false, // Default status
      icon: 'assets/icons/device_unknown.svg', // Default icon path
      id: null, // ID will be generated by Firestore on save
      openPorts: ports, // Assign the parsed open ports
      ip: json['ip'] as String?, // Assign the IP from the Python JSON
    );
  }


  @override
  String toString() {
    return 'Device{id: $id, name: $name, room: $room, status: $status, icon: $icon, openPorts: $openPorts, ip: $ip}';
  }
}
