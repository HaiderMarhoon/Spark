import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:provider/provider.dart';
import 'device_discovery.dart';
import 'device.dart';
import 'device_control_screen.dart';
import 'usage_analysis_screen.dart';
import 'bill_management_screen.dart';
import 'rewards_screen.dart';
import 'auth_service.dart';
import 'welcome_screen.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class Device {
  String name;
  String room;
  bool status;
  String icon;
  String? id; // Add an optional ID field, generated by Firebase

  Device({
    required this.name,
    required this.room,
    required this.status,
    required this.icon,
    this.id, // Make the ID optional
  });

  //  toJson method for  conversion to  Firestore data.
  Map<String, dynamic> toJson() {
    return {
      'name': name,
      'room': room,
      'status': status,
      'icon': icon,
    };
  }

  //  fromJson for converting from Firestore  to a Device object
  factory Device.fromJson(Map<String, dynamic> json, String documentId) {
    return Device(
      id: documentId, //  ID from the document ID
      name: json['name'] ?? '',
      room: json['room'] ?? '',
      status: json['status'] ?? false,
      icon: json['icon'] ?? '',
    );
  }

  @override
  String toString() {
    return 'Device{id: $id, name: $name, room: $room, status: $status, icon: $icon}';
  }
}

class HomeScreen extends StatefulWidget {
  final String userId;
  final String userEmail;

  const HomeScreen({
    Key? key,
    required this.userId,
    required this.userEmail,
  }) : super(key: key);

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  int _selectedIndex = 0;
  late AuthService auth;

  final List<Widget> _screens = [
    const HomeContentScreen(),
    const UsageAnalysisScreen(),
    const BillManagementScreen(),
    const RewardsScreen(),
  ];

  @override
  void initState() {
    super.initState();
    auth = Provider.of<AuthService>(context, listen: false);
  }

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: _selectedIndex == 0
          ? AppBar(
        title: Text("${auth.userName}'s Home"),
        actions: [
          IconButton(
            icon: const Icon(Icons.account_circle),
            onPressed: () => _showUserProfile(context, auth),
          ),
        ],
      )
          : null,
      body: IndexedStack(
        index: _selectedIndex,
        children: _screens,
      ),
      bottomNavigationBar: _buildBottomNavBar(),
    );
  }

  BottomNavigationBar _buildBottomNavBar() {
    return BottomNavigationBar(
      currentIndex: _selectedIndex,
      selectedItemColor: Colors.blue.shade800,
      unselectedItemColor: Colors.grey.shade600,
      onTap: _onItemTapped,
      backgroundColor: Colors.transparent,
      elevation: 0,
      type: BottomNavigationBarType.fixed,
      selectedLabelStyle: const TextStyle(fontWeight: FontWeight.bold),
      showUnselectedLabels: false,
      items: const [
        BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
        BottomNavigationBarItem(icon: Icon(Icons.analytics), label: 'Analytics'),
        BottomNavigationBarItem(icon: Icon(Icons.receipt), label: 'Bills'),
        BottomNavigationBarItem(icon: Icon(Icons.star), label: 'Rewards'),
      ],
    );
  }

  void _showUserProfile(BuildContext context, AuthService auth) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(auth.userName ?? 'User'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text("Email: ${auth.userEmail}"),
            const SizedBox(height: 8),
            Text("Name: ${auth.userName}"),
            const SizedBox(height: 8),
            Text("ID: ${auth.userId}"),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text("Close"),
          ),
          TextButton(
            onPressed: () {
              Navigator.pushReplacement(
                context,
                MaterialPageRoute(builder: (context) => const WelcomeScreen()),
              );
            },
            child: const Text("Logout"),
          ),
        ],
      ),
    );
  }
}

class HomeContentScreen extends StatefulWidget {
  const HomeContentScreen({Key? key}) : super(key: key);

  @override
  State<HomeContentScreen> createState() => _HomeContentScreenState();
}

class _HomeContentScreenState extends State<HomeContentScreen> {
  StreamSubscription<String>? _deviceStreamSubscription;
  String _discoveryStatus = '';
  List<String> _networkDevices = [];
  List<String> _portResults = [];
  final DeviceDiscovery _deviceDiscovery = DeviceDiscovery();
  late List<Device> _devices = [];
  List<String> _discoveredDevices = [];
  List<String> _securityResults = [];
  bool _isScanning = false;
  bool _isLoading = true;
  late AuthService auth;
  final _deviceNameController = TextEditingController();
  final _roomNameController = TextEditingController();
  //final String _devicesKey = 'user_devices'; // No longer needed
  final CollectionReference _devicesCollection =
  FirebaseFirestore.instance.collection('devices'); // Firestore collection

  @override
  void initState() {
    super.initState();
    auth = Provider.of<AuthService>(context, listen: false);
    _loadInitialData();
  }

  Future<void> _loadInitialData() async {
    await Future.wait([
      _loadDevices(),
      _fetchUserDevices(),
    ]);
    setState(() => _isLoading = false);
  }

  Future<void> _loadDevices() async {
    try {
      // Get the devices for the current user.
      final snapshot =
      await _devicesCollection.where('userId', isEqualTo: auth.userId).get();
      _devices = snapshot.docs.map((doc) {
        //  Device.fromJson, passing the document ID.
        return Device.fromJson(doc.data() as Map<String, dynamic>, doc.id);
      }).toList();
      print("Loaded devices: $_devices");
    } catch (e) {
      print("Error loading devices: $e");
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Failed to load devices: $e")),
      );
      _devices = [];
    }
  }

  Future<void> _saveDevices() async {
    try {
      //  the existing devices for the user.
      final existingDevicesSnapshot = await _devicesCollection
          .where('userId', isEqualTo: auth.userId)
          .get();

      // Delete all existing documents
      for (final doc in existingDevicesSnapshot.docs) {
        await _devicesCollection.doc(doc.id).delete();
      }

      // Add the current devices.
      for (final device in _devices) {
        //if (device.id == null) { // Add this check
        await _devicesCollection.add({
          'userId': auth.userId, //  the user ID
          'name': device.name,
          'room': device.room,
          'status': device.status,
          'icon': device.icon,
        });
        //}
      }
      print("Saved devices: $_devices");
    } catch (e) {
      print("Error saving devices: $e");
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Failed to save devices: $e")),
      );
    }
  }

  Future<void> _fetchUserDevices() async {
    try {
      await Future.delayed(const Duration(seconds: 1));
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Error loading devices: $e")),
      );
    }
  }

  void _startDeviceDiscovery() {
    if (_isScanning) return;

    setState(() {
      _isScanning = true;
      _discoveryStatus = 'Scanning...';
      _discoveredDevices.clear();
      _securityResults.clear();
      _networkDevices.clear();
      _portResults.clear();
    });

    _deviceDiscovery.startDiscovery();
    _deviceStreamSubscription = _deviceDiscovery.deviceStream.listen((deviceInfo) {
      print("HomeContentScreen: Device Discovered: $deviceInfo");
      if (mounted && !_discoveredDevices.contains(deviceInfo)) {
        setState(() {
          _discoveredDevices.add(deviceInfo);
          _networkDevices.add(deviceInfo);
        });
      }
    }, onDone: () {
      setState(() {
        _isScanning = false;
        _discoveryStatus = 'Scan complete';
      });
    });
  }

  Future<void> _performSecurityScan() async {
    setState(() => _securityResults.add("Scanning devices..."));

    await Future.delayed(const Duration(seconds: 2));

    setState(() {
      _securityResults = [
        "ðŸ”’ Router - Secure",
        "ðŸ”“ Smart TV - Port 8080 open",
        "ðŸ”’ AC Unit - No vulnerabilities",
      ];
    });
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return const Center(child: CircularProgressIndicator());
    }

    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildWelcomeHeader(),
          const SizedBox(height: 20),
          _buildBillCard(),
          const SizedBox(height: 20),
          _buildControlButtons(),
          const SizedBox(height: 25),
          _buildNetworkSection(),
          const SizedBox(height: 25),
          _buildSecuritySection(),
          const SizedBox(height: 25),
          _buildDevicesGrid(),
        ],
      ),
    );
  }

  Widget _buildWelcomeHeader() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          "Welcome back, ${auth.userName}!",
          style: const TextStyle(
            fontSize: 24,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 4),
        Text(
          "Here's your home overview",
          style: TextStyle(
            fontSize: 16,
            color: Colors.grey[600],
          ),
        ),
      ],
    );
  }

  Widget _buildBillCard() {
    return Card(
      color: Colors.greenAccent,
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            const Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text("Current Bill", style: TextStyle(fontWeight: FontWeight.bold)),
              ],
            ),
            const SizedBox(height: 8),
            const Text(
              "17.03 BHD",
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: Colors.green,
              ),
            ),
            const SizedBox(height: 8),
            LinearProgressIndicator(
              value: 0.34,
              backgroundColor: Colors.grey[200],
              color: Colors.blue,
            ),
            const SizedBox(height: 8),
          ],
        ),
      ),
    );
  }

  Widget _buildControlButtons() {
    return Container(
      color: Colors.greenAccent,
      padding: const EdgeInsets.symmetric(vertical: 10),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceAround,
        children: [
          _buildControlButton(
            Icons.search,
            "Scan Devices",
            _startDeviceDiscovery,
          ),
          _buildControlButton(
            Icons.security,
            "Run Security",
            _performSecurityScan,
          ),
          _buildControlButton(
            Icons.add,
            "Add Device",
                () => _showAddDeviceDialog(),
          ),
        ],
      ),
    );
  }

  Widget _buildControlButton(IconData icon, String label, VoidCallback onPressed) {
    return Column(
      children: [
        IconButton(
          icon: Icon(icon, size: 32),
          onPressed: onPressed,
        ),
        const SizedBox(height: 4),
        Text(label),
      ],
    );
  }

  Widget _buildNetworkSection() {
    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text("Network Status",
                style: TextStyle(fontWeight: FontWeight.bold, fontSize: 18)),
            const SizedBox(height: 12),
            Row(
              children: [
                _isScanning
                    ? const CircularProgressIndicator()
                    : const Icon(Icons.wifi, color: Colors.green),
                const SizedBox(width: 12),
                Text(_isScanning
                    ? "Scanning..."
                    : "Found ${_discoveredDevices.length} devices"),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSecuritySection() {
    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text("Security Report",
                style: TextStyle(fontWeight: FontWeight.bold, fontSize: 18)),
            const SizedBox(height: 12),
            ..._securityResults.map((result) => ListTile(
              leading: Icon(
                result.contains("ðŸ”“")
                    ? Icons.warning
                    : Icons.check_circle,
                color: result.contains("ðŸ”“")
                    ? Colors.orange
                    : Colors.green,
              ),
              title: Text(result.replaceAll("ðŸ”“", "").replaceAll("ðŸ”’", "")),
              dense: true,
            )),
          ],
        ),
      ),
    );
  }

  Widget _buildDevicesGrid() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text("Your Smart Devices",
            style: TextStyle(fontWeight: FontWeight.bold, fontSize: 18)),
        const SizedBox(height: 12),
        GridView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 2,
            crossAxisSpacing: 12,
            mainAxisSpacing: 12,
            childAspectRatio: 1,
          ),
          itemCount: _devices.length,
          itemBuilder: (context, index) => _buildDeviceCard(_devices[index]),
        ),
      ],
    );
  }

  Widget _buildDeviceCard(Device device) {
    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(12),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                GestureDetector(
                  onTap: () {
                    _showDeviceOptions(device); // Show options on icon tap
                  },
                  child: _buildDeviceIcon(device.icon),
                ),
                Switch(
                  value: device.status,
                  onChanged: (value) => _toggleDevice(device, value),
                ),
              ],
            ),
            const SizedBox(height: 8),
            Text(device.name,
                style: const TextStyle(fontWeight: FontWeight.bold)),
            Text(device.room, style: TextStyle(color: Colors.grey[600])),
            const Spacer(),
            IconButton(
              icon: const Icon(Icons.settings),
              onPressed: () => _showDeviceSettings(device),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDeviceIcon(String iconName) {
    return iconName.endsWith('.svg')
        ? SvgPicture.asset(
      "assets/icons/$iconName",
      width: 32,
      height: 32,
      colorFilter:
      const ColorFilter.mode(Colors.blue, BlendMode.srcIn),
    )
        : Icon(Icons.device_unknown, size: 32);
  }

  void _toggleDevice(Device device, bool value) {
    setState(() => device.status = value);
    _saveDevices();
    // Call API to update device status
  }

  void _showDeviceSettings(Device device) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text("Control ${device.name}"),
        content: const DeviceControlScreen(),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text("Close"),
          ),
        ],
      ),
    );
  }

  void _showDeviceOptions(Device device) {
    showModalBottomSheet(
      context: context,
      builder: (context) {
        return Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            ListTile(
              leading: const Icon(Icons.edit),
              title: const Text('Edit Device'),
              onTap: () {
                Navigator.pop(context);
                _showEditDeviceDialog(device); // Show edit dialog
              },
            ),
            ListTile(
              leading: const Icon(Icons.delete),
              title: const Text('Delete Device'),
              onTap: () {
                Navigator.pop(context);
                _deleteDevice(device); // Delete device
              },
            ),
          ],
        );
      },
    );
  }

  void _deleteDevice(Device device) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text("Delete Device"),
        content: const Text("Are you sure you want to delete this device?"),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text("Cancel"),
          ),
          TextButton(
            onPressed: () async {
              try {
                if (device.id != null) {
                  // Delete from Firestore
                  await _devicesCollection.doc(device.id).delete();
                  setState(() {
                    _devices.removeWhere((d) => d.id == device.id);
                  });
                  _saveDevices();
                  Navigator.pop(context); // Close the dialog
                } else {
                  Navigator.pop(context);
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                        content: Text("Device ID is null. Cannot delete.")),
                  );
                }
              } catch (e) {
                print("Error deleting device: $e");
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text("Failed to delete device: $e")),
                );
              }
            },
            child: const Text("Delete"),
          ),
        ],
      ),
    );
  }

  void _showEditDeviceDialog(Device device) {
    _deviceNameController.text = device.name;
    _roomNameController.text = device.room;

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text("Edit Device"),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: _deviceNameController,
              decoration: const InputDecoration(labelText: "Device Name"),
            ),
            TextField(
              controller: _roomNameController,
              decoration: const InputDecoration(labelText: "Room"),
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: () async {
                try {
                  // Update in Firestore
                  if (device.id != null) {
                    await _devicesCollection.doc(device.id).update({
                      'name': _deviceNameController.text,
                      'room': _roomNameController.text,
                    });

                    // Update the local list
                    setState(() {
                      device.name = _deviceNameController.text;
                      device.room = _roomNameController.text;
                    });
                    _saveDevices();
                    _deviceNameController.clear();
                    _roomNameController.clear();
                    Navigator.pop(context); // Close the dialog
                  } else {
                    Navigator.pop(context);
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(
                          content: Text("Device ID is null. Cannot update.")),
                    );
                  }
                } catch (e) {
                  print("Error updating device: $e");
                  Navigator.pop(context);
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text("Failed to update device: $e")),
                  );
                }
              },
              child: const Text("Update Device"),
            ),
          ],
        ),
      ),
    );
  }

  void _showAddDeviceDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text("Add New Device"),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: _deviceNameController,
              decoration: const InputDecoration(labelText: "Device Name"),
            ),
            TextField(
              controller: _roomNameController,
              decoration: const InputDecoration(labelText: "Room"),
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: () async {
                // Add the new device to the list
                final newDevice = Device(
                  name: _deviceNameController.text,
                  room: _roomNameController.text,
                  status: false,
                  icon: 'device_unknown.svg',
                );

                try {
                  // Add to Firestore
                  final docRef = await _devicesCollection.add({
                    'userId': auth.userId, //  user ID
                    'name': newDevice.name,
                    'room': newDevice.room,
                    'status': newDevice.status,
                    'icon': newDevice.icon,
                  });

                  // Get the ID from the DocumentReference
                  final addedDevice = Device(
                      id: docRef.id,
                      name: newDevice.name,
                      room: newDevice.room,
                      status: newDevice.status,
                      icon: newDevice.icon);
                  setState(() {
                    _devices.add(addedDevice);
                  });
                  _saveDevices(); // Save
                  _deviceNameController.clear();
                  _roomNameController.clear();
                  Navigator.pop(context);
                } catch (e) {
                  print("Error adding device: $e");
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text("Failed to add device: $e")),
                  );
                }
              },
              child: const Text("Add Device"),
            ),
          ],
        ),
      ),
    );
  }

  @override
  void dispose() {
    _deviceDiscovery.stopDiscovery();
    _deviceNameController.dispose();
    _roomNameController.dispose();
    super.dispose();
  }
}

